--- Archivo: tsconfig.app.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/tsconfig.app.json
----------------------------------------
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "@angular/localize"
    ]
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "src/**/*.spec.ts"
  ]
}

----------------------------------------

--- Archivo: angular.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/angular.json
----------------------------------------
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "medisupply": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "i18n": {
        "sourceLocale": "es-CO",
        "locales": {
          "en-US": "src/locale/messages.en-US.xlf"
        }
      },
      "architect": {
        "build": {
          "builder": "@angular/build:application",
          "options": {
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js",
              "@angular/localize/init"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/assets",
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/custom-theme.scss",
              "src/styles.css"
            ]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            },
            "en-US": {
              "localize": [
                "en-US"
              ]
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular/build:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "medisupply:build:production"
            },
            "development": {
              "buildTarget": "medisupply:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular/build:extract-i18n"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing",
              "@angular/localize/init"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              },
              {
                "glob": "**/*",
                "input": "src/assets"
              }
            ],
            "styles": [
              "src/styles.css"
            ]
          }
        },
        "lint": {
          "builder": "@angular-eslint/builder:lint",
          "options": {
            "lintFilePatterns": [
              "src/**/*.ts",
              "src/**/*.html"
            ]
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "3b4626a5-ab6e-45cf-ab96-18e539e616f4",
    "schematicCollections": [
      "angular-eslint"
    ]
  }
}

----------------------------------------

--- Archivo: package.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/package.json
----------------------------------------
{
  "name": "medisupply",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "format": "prettier --write \"src/**/*.{ts,html,scss,css,json,md}\"",
    "test": "ng test",
    "lint": "ng lint"
  },
  "prettier": {
    "printWidth": 100,
    "singleQuote": true,
    "overrides": [
      {
        "files": "*.html",
        "options": {
          "parser": "angular"
        }
      }
    ]
  },
  "private": true,
  "dependencies": {
    "@angular/cdk": "^20.2.5",
    "@angular/common": "^20.3.0",
    "@angular/compiler": "^20.3.0",
    "@angular/core": "^20.3.0",
    "@angular/forms": "^20.3.0",
    "@angular/material": "^20.2.5",
    "@angular/platform-browser": "^20.3.0",
    "@angular/router": "^20.3.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular/build": "^20.3.3",
    "@angular/cli": "^20.3.3",
    "@angular/compiler-cli": "^20.3.0",
    "@angular/localize": "^20.3.2",
    "@types/jasmine": "~5.1.0",
    "angular-eslint": "20.3.0",
    "eslint": "^9.35.0",
    "jasmine-core": "~5.9.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "prettier": "^3.6.2",
    "typescript": "~5.9.2",
    "typescript-eslint": "8.40.0"
  }
}

----------------------------------------

--- Archivo: tsconfig.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/tsconfig.json
----------------------------------------
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "experimentalDecorators": true,
    "importHelpers": true,
    "target": "ES2022",
    "module": "preserve"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "typeCheckHostBindings": true,
    "strictTemplates": true
  },
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}

----------------------------------------

--- Archivo: tsconfig.spec.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/tsconfig.spec.json
----------------------------------------
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.ts"
  ]
}

----------------------------------------

--- Archivo: _metadata.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.angular/cache/20.3.4/medisupply/vite/deps_ssr/_metadata.json
----------------------------------------
{
  "hash": "ac0011d1",
  "configHash": "9ed3d382",
  "lockfileHash": "6bc23aef",
  "browserHash": "3f1288d3",
  "optimized": {},
  "chunks": {}
}
----------------------------------------

--- Archivo: package.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.angular/cache/20.3.4/medisupply/vite/deps_ssr/package.json
----------------------------------------
{
  "type": "module"
}

----------------------------------------

--- Archivo: _metadata.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.angular/cache/20.3.4/medisupply/vite/deps/_metadata.json
----------------------------------------
{
  "hash": "d75224db",
  "configHash": "b4828f7f",
  "lockfileHash": "6bc23aef",
  "browserHash": "494c7a01",
  "optimized": {
    "@angular/cdk/bidi": {
      "src": "../../../../../../node_modules/@angular/cdk/fesm2022/bidi.mjs",
      "file": "@angular_cdk_bidi.js",
      "fileHash": "39d22a4e",
      "needsInterop": false
    },
    "@angular/cdk/scrolling": {
      "src": "../../../../../../node_modules/@angular/cdk/fesm2022/scrolling.mjs",
      "file": "@angular_cdk_scrolling.js",
      "fileHash": "7d54d91e",
      "needsInterop": false
    },
    "@angular/cdk/text-field": {
      "src": "../../../../../../node_modules/@angular/cdk/fesm2022/text-field.mjs",
      "file": "@angular_cdk_text-field.js",
      "fileHash": "dbd2059d",
      "needsInterop": false
    },
    "@angular/common": {
      "src": "../../../../../../node_modules/@angular/common/fesm2022/common.mjs",
      "file": "@angular_common.js",
      "fileHash": "56a66e02",
      "needsInterop": false
    },
    "@angular/common/http": {
      "src": "../../../../../../node_modules/@angular/common/fesm2022/http.mjs",
      "file": "@angular_common_http.js",
      "fileHash": "31892f21",
      "needsInterop": false
    },
    "@angular/core": {
      "src": "../../../../../../node_modules/@angular/core/fesm2022/core.mjs",
      "file": "@angular_core.js",
      "fileHash": "a17a74c9",
      "needsInterop": false
    },
    "@angular/forms": {
      "src": "../../../../../../node_modules/@angular/forms/fesm2022/forms.mjs",
      "file": "@angular_forms.js",
      "fileHash": "4d64c5ed",
      "needsInterop": false
    },
    "@angular/localize/init": {
      "src": "../../../../../../node_modules/@angular/localize/fesm2022/init.mjs",
      "file": "@angular_localize_init.js",
      "fileHash": "d95db931",
      "needsInterop": false
    },
    "@angular/material/button": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/button.mjs",
      "file": "@angular_material_button.js",
      "fileHash": "bf25f231",
      "needsInterop": false
    },
    "@angular/material/divider": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/divider.mjs",
      "file": "@angular_material_divider.js",
      "fileHash": "9022d25d",
      "needsInterop": false
    },
    "@angular/material/form-field": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/form-field.mjs",
      "file": "@angular_material_form-field.js",
      "fileHash": "f1a5ef57",
      "needsInterop": false
    },
    "@angular/material/icon": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/icon.mjs",
      "file": "@angular_material_icon.js",
      "fileHash": "d9f2c200",
      "needsInterop": false
    },
    "@angular/material/input": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/input.mjs",
      "file": "@angular_material_input.js",
      "fileHash": "10b11122",
      "needsInterop": false
    },
    "@angular/material/list": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/list.mjs",
      "file": "@angular_material_list.js",
      "fileHash": "e5f5bbc7",
      "needsInterop": false
    },
    "@angular/material/menu": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/menu.mjs",
      "file": "@angular_material_menu.js",
      "fileHash": "0f0ad9b2",
      "needsInterop": false
    },
    "@angular/material/select": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/select.mjs",
      "file": "@angular_material_select.js",
      "fileHash": "d2312d96",
      "needsInterop": false
    },
    "@angular/material/toolbar": {
      "src": "../../../../../../node_modules/@angular/material/fesm2022/toolbar.mjs",
      "file": "@angular_material_toolbar.js",
      "fileHash": "20104f43",
      "needsInterop": false
    },
    "@angular/platform-browser": {
      "src": "../../../../../../node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs",
      "file": "@angular_platform-browser.js",
      "fileHash": "f0b6fad5",
      "needsInterop": false
    },
    "@angular/router": {
      "src": "../../../../../../node_modules/@angular/router/fesm2022/router.mjs",
      "file": "@angular_router.js",
      "fileHash": "e02194cf",
      "needsInterop": false
    },
    "rxjs": {
      "src": "../../../../../../node_modules/rxjs/dist/esm5/index.js",
      "file": "rxjs.js",
      "fileHash": "fcaf4d7e",
      "needsInterop": false
    },
    "zone.js": {
      "src": "../../../../../../node_modules/zone.js/fesm2015/zone.js",
      "file": "zone__js.js",
      "fileHash": "1ad3431f",
      "needsInterop": true
    },
    "@angular/common/locales/global/es-CO": {
      "src": "../../../../../../node_modules/@angular/common/locales/global/es-CO.js",
      "file": "@angular_common_locales_global_es-CO.js",
      "fileHash": "2113bbe5",
      "needsInterop": true
    }
  },
  "chunks": {
    "chunk-5XSPSO54": {
      "file": "chunk-5XSPSO54.js"
    },
    "chunk-4H73IRVC": {
      "file": "chunk-4H73IRVC.js"
    },
    "chunk-6IBMXDYE": {
      "file": "chunk-6IBMXDYE.js"
    },
    "chunk-37X2G35G": {
      "file": "chunk-37X2G35G.js"
    },
    "chunk-O2LANJEK": {
      "file": "chunk-O2LANJEK.js"
    },
    "chunk-NSIH6GBL": {
      "file": "chunk-NSIH6GBL.js"
    },
    "chunk-A5LQC3LA": {
      "file": "chunk-A5LQC3LA.js"
    },
    "chunk-R4HQUAUW": {
      "file": "chunk-R4HQUAUW.js"
    },
    "chunk-32YMCYCH": {
      "file": "chunk-32YMCYCH.js"
    },
    "chunk-46AA4AMY": {
      "file": "chunk-46AA4AMY.js"
    },
    "chunk-PRRCYF52": {
      "file": "chunk-PRRCYF52.js"
    },
    "chunk-OQN7GUKA": {
      "file": "chunk-OQN7GUKA.js"
    },
    "chunk-YPQXBKCF": {
      "file": "chunk-YPQXBKCF.js"
    },
    "chunk-46HAYV32": {
      "file": "chunk-46HAYV32.js"
    },
    "chunk-ALLRMR4J": {
      "file": "chunk-ALLRMR4J.js"
    },
    "chunk-6MDCMAAA": {
      "file": "chunk-6MDCMAAA.js"
    },
    "chunk-5EG33CFQ": {
      "file": "chunk-5EG33CFQ.js"
    },
    "chunk-V32IFUNM": {
      "file": "chunk-V32IFUNM.js"
    },
    "chunk-2KLOV7VD": {
      "file": "chunk-2KLOV7VD.js"
    },
    "chunk-XEHQVV2Y": {
      "file": "chunk-XEHQVV2Y.js"
    },
    "chunk-LSSAH52O": {
      "file": "chunk-LSSAH52O.js"
    },
    "chunk-YLHXK2KV": {
      "file": "chunk-YLHXK2KV.js"
    },
    "chunk-BLUVHALM": {
      "file": "chunk-BLUVHALM.js"
    },
    "chunk-RSS3ODKE": {
      "file": "chunk-RSS3ODKE.js"
    },
    "chunk-WDMUDEB6": {
      "file": "chunk-WDMUDEB6.js"
    }
  }
}
----------------------------------------

--- Archivo: package.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.angular/cache/20.3.4/medisupply/vite/deps/package.json
----------------------------------------
{
  "type": "module"
}

----------------------------------------

--- Archivo: extensions.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.vscode/extensions.json
----------------------------------------
{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=827846
  "recommendations": ["angular.ng-template"]
}

----------------------------------------

--- Archivo: launch.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.vscode/launch.json
----------------------------------------
{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "ng serve",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: start",
      "url": "http://localhost:4200/"
    },
    {
      "name": "ng test",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: test",
      "url": "http://localhost:9876/debug.html"
    }
  ]
}

----------------------------------------

--- Archivo: tasks.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/.vscode/tasks.json
----------------------------------------
{
  // For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "start",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    },
    {
      "type": "npm",
      "script": "test",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    }
  ]
}

----------------------------------------

--- Archivo: index.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/index.html
----------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Medisupply</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=League+Spartan:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>

----------------------------------------

--- Archivo: main.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/main.ts
----------------------------------------
/// <reference types="@angular/localize" />

import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { App } from './app/app';

bootstrapApplication(App, appConfig).catch((err) => console.error(err));

----------------------------------------

--- Archivo: styles.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/styles.css
----------------------------------------
/* You can add global styles to this file, and also import other style files */

html,
body {
  height: 100%;
}
body {
  margin: 0;
  background: #cad6ff;
}

----------------------------------------

--- Archivo: app.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/app.spec.ts
----------------------------------------
import { TestBed } from '@angular/core/testing';
import { App } from './app';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [App],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(App);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(App);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, medisupply');
  });
});

----------------------------------------

--- Archivo: app.routes.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/app.routes.ts
----------------------------------------
import { Routes } from '@angular/router';
import { Component } from '@angular/core';
import { Dashboard } from './pages/dashboard/dashboard';
import { RegionalSettings } from './pages/regional-settings/regional-settings';
import { Components } from './pages/components/components';

@Component({
  standalone: true,
  template: `<h2>Página en construcción</h2>`,
})
class EmptyComponent {}

export const routes: Routes = [
  { path: '', redirectTo: 'dashboard', pathMatch: 'full' },
  { path: 'dashboard', component: Dashboard },
  { path: 'productos', component: EmptyComponent },
  { path: 'usuarios', component: EmptyComponent },
  { path: 'reportes', component: EmptyComponent },
  { path: 'ventas', component: EmptyComponent },
  { path: 'rutas', component: EmptyComponent },
  { path: 'settings/region', component: RegionalSettings },
  { path: 'productos/cargar', component: EmptyComponent },
  { path: 'rutas/generar', component: EmptyComponent },
  { path: 'ventas/crear-plan', component: EmptyComponent },
  { path: 'usuarios/registro', component: EmptyComponent },
  { path: 'reportes', component: EmptyComponent },
  // El path de componentes muestra la guía de componentes para la web
  { path: 'componentes', component: Components },
];

----------------------------------------

--- Archivo: app.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/app.ts
----------------------------------------
import { Component, signal } from '@angular/core';
import { RouterOutlet, RouterLink, RouterLinkActive, Router, NavigationEnd } from '@angular/router';
import { MatListModule } from '@angular/material/list';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';
import { IconService } from './icon.service';
import { inject } from '@angular/core';
import { filter } from 'rxjs';
import { TranslatePipe } from './shared/pipes/translate.pipe';
interface MenuItem {
  path: string;
  icon: string;
  labelKey: string;
  ariaKey: string;
  exact: boolean;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    RouterOutlet,
    RouterLink,
    RouterLinkActive,
    MatListModule,
    MatIconModule,
    TranslatePipe,
  ],
  templateUrl: './app.html',
  styleUrls: ['./app.css'],
})
export class App {
  protected readonly title = signal('medisupply');
  private readonly iconService = inject(IconService);
  private readonly router = inject(Router);

  currentUrl = signal(this.router.url);

  menuItems = signal<MenuItem[]>([
    {
      path: '/dashboard',
      icon: 'home',
      labelKey: 'menu_dashboard_label',
      ariaKey: 'menu_dashboard_aria',
      exact: true,
    },
    {
      path: '/productos',
      icon: 'box',
      labelKey: 'menu_productos_label',
      ariaKey: 'menu_productos_aria',
      exact: false,
    },
    {
      path: '/usuarios',
      icon: 'users',
      labelKey: 'menu_usuarios_label',
      ariaKey: 'menu_usuarios_aria',
      exact: false,
    },
    {
      path: '/reportes',
      icon: 'bar-chart',
      labelKey: 'menu_reportes_label',
      ariaKey: 'menu_reportes_aria',
      exact: false,
    },
    {
      path: '/ventas',
      icon: 'dollar',
      labelKey: 'menu_ventas_label',
      ariaKey: 'menu_ventas_aria',
      exact: false,
    },
    {
      path: '/rutas',
      icon: 'map',
      labelKey: 'menu_rutas_label',
      ariaKey: 'menu_rutas_aria',
      exact: false,
    },
  ]);

  constructor() {
    this.router.events
      .pipe(filter((e): e is NavigationEnd => e instanceof NavigationEnd))
      .subscribe((e) => {
        this.currentUrl.set(e.urlAfterRedirects);
      });
  }

  isActive(route: string): boolean {
    const url = this.currentUrl();
    return route === '/dashboard'
      ? url === '/' || url.startsWith('/dashboard')
      : url.startsWith(route);
  }
}

----------------------------------------

--- Archivo: app.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/app.css
----------------------------------------
.menu-item {
  display: flex;
  align-items: center;
  gap: 10px;
}

.logo {
  display: flex;
  justify-content: center;

  img {
    width: 300px;
    height: 40px;
    margin-bottom: 58px;
  }
}

----------------------------------------

--- Archivo: icon.service.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/icon.service.ts
----------------------------------------
import { Injectable, inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { MatIconRegistry } from '@angular/material/icon';

@Injectable({ providedIn: 'root' })
export class IconService {
  private readonly iconRegistry = inject(MatIconRegistry);
  private readonly sanitizer = inject(DomSanitizer);

  constructor() {
    this.registerIcons();
  }

  private registerIcons(): void {
    const icons: Record<string, string> = {
      home: 'assets/icons/home.svg',
      box: 'assets/icons/box.svg',
      users: 'assets/icons/users.svg',
      'bar-chart': 'assets/icons/bar-chart.svg',
      dollar: 'assets/icons/dollar.svg',
      map: 'assets/icons/map.svg',
      user: 'assets/icons/user.svg',
      logout: 'assets/icons/logout.svg',
      upload: 'assets/icons/upload.svg',
      list: 'assets/icons/list.svg',
      reports: 'assets/icons/reports.svg',
      arrow: 'assets/icons/arrow-icon.svg',
      chart: 'assets/icons/chart.svg',
    };

    for (const [name, path] of Object.entries(icons)) {
      this.iconRegistry.addSvgIcon(name, this.sanitizer.bypassSecurityTrustResourceUrl(path));
    }
  }
}

----------------------------------------

--- Archivo: app.config.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/app.config.ts
----------------------------------------
import {
  ApplicationConfig,
  provideBrowserGlobalErrorListeners,
  provideZoneChangeDetection,
} from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient(),
  ],
};

----------------------------------------

--- Archivo: app.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/app.html
----------------------------------------
<div class="app-layout">
  <mat-nav-list
    class="sidebar"
    role="navigation"
    aria-label="Menú principal"
    i18n-aria-label="@@sidebar.label"
  >
    <div class="logo">
      <img src="assets/logo.svg" [attr.alt]="'app_logo_label' | translate" />
    </div>

    @for (item of menuItems(); track item.path) {
      <a
        mat-list-item
        [routerLink]="item.path"
        [class.active]="isActive(item.path)"
        [attr.aria-label]="item.ariaKey | translate"
        [attr.aria-current]="isActive(item.path) ? 'page' : null"
      >
        <mat-icon svgIcon="{{ item.icon }}" />
        <span>{{ item.labelKey | translate }}</span>
      </a>
    }
  </mat-nav-list>

  <main class="content" role="main">
    <router-outlet></router-outlet>
  </main>
</div>

----------------------------------------

--- Archivo: status-message.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/status-message/status-message.css
----------------------------------------
.status-message {
  display: flex;
  align-items: center;
  justify-content: space-between;
  min-width: 280px;
  max-width: 100%;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  gap: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.status-message.success {
  background-color: #e6f4ea;
  color: #09a794;
}

.status-message.error {
  background-color: #fbe9e7;
  color: #eb5757;
}

.status-message.float {
  position: fixed;
  top: 180px;
  left: 50%;
  z-index: 1000;
  animation: fadeIn 0.3s ease-out;
}

.status-message.inline {
  position: static;
  box-shadow: none;
}

.message-text {
  flex-grow: 1;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

----------------------------------------

--- Archivo: status-message.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/status-message/status-message.ts
----------------------------------------
import { Component, effect, Input, signal } from '@angular/core';
import { TranslatePipe } from '../pipes/translate.pipe';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule, NgClass } from '@angular/common';
import { toSignal } from '@angular/core/rxjs-interop';

@Component({
  selector: 'app-status-message',
  imports: [TranslatePipe, MatIconModule, NgClass, CommonModule],
  templateUrl: './status-message.html',
  styleUrl: './status-message.css',
})
export class StatusMessage {
  @Input() type: 'success' | 'error' = 'success';
  @Input() messageKey: string = '';
  @Input() float = false;
  @Input() duration?: number;

  visible = signal(true);

  ngOnInit(): void {
    if (this.duration && this.duration > 0) {
      setTimeout(() => this.visible.set(false), this.duration);
    }
  }
}

----------------------------------------

--- Archivo: status-message.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/status-message/status-message.html
----------------------------------------
<div
  *ngIf="visible()"
  class="status-message"
  [ngClass]="[type, float ? 'float' : 'inline']"
  [attr.role]="type === 'error' ? 'alert' : 'status'"
  [attr.aria-live]="type === 'error' ? 'assertive' : 'polite'"
>
  <span class="message-text">{{ messageKey | translate }}</span>
  <mat-icon aria-hidden="true">
    {{ type === 'error' ? 'close' : 'check' }}
  </mat-icon>
</div>

----------------------------------------

--- Archivo: status-message.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/status-message/status-message.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { StatusMessage } from './status-message';

describe('StatusMessage', () => {
  let component: StatusMessage;
  let fixture: ComponentFixture<StatusMessage>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [StatusMessage],
    }).compileComponents();

    fixture = TestBed.createComponent(StatusMessage);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: translate.pipe.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/pipes/translate.pipe.ts
----------------------------------------
import { Pipe, PipeTransform } from '@angular/core';
import { ACTIVE_TRANSLATIONS, currentLangSignal } from '../lang/lang-store';

@Pipe({
  name: 'translate',
  standalone: true,
  pure: false,
})
export class TranslatePipe implements PipeTransform {
  transform(key: string): string {
    currentLangSignal();
    return ACTIVE_TRANSLATIONS[key] || key;
  }
}

----------------------------------------

--- Archivo: lang-store.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/lang/lang-store.ts
----------------------------------------
import { signal } from '@angular/core';
import ES_TRANSLATIONS from '../../pages/regional-settings/es.json';
import EN_TRANSLATIONS from '../../pages/regional-settings/en.json';

export const ACTIVE_TRANSLATIONS: Record<string, string> = {};

export type LangKey = 'es' | 'en';

export const currentLangSignal = signal<LangKey>(
  (localStorage.getItem('userLang')?.split('-')[0] as LangKey) || 'es',
);

export function loadTranslations(lang: LangKey) {
  let newTranslations: Record<string, string> = {};

  if (lang === 'es') {
    newTranslations = ES_TRANSLATIONS;
  } else if (lang === 'en') {
    newTranslations = EN_TRANSLATIONS;
  }

  Object.keys(ACTIVE_TRANSLATIONS).forEach((key) => delete ACTIVE_TRANSLATIONS[key]);
  Object.assign(ACTIVE_TRANSLATIONS, newTranslations);
  currentLangSignal.set(lang);
}

loadTranslations(currentLangSignal());

----------------------------------------

--- Archivo: action-card.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/action-card/action-card.ts
----------------------------------------
import { Component, inject, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { Router } from '@angular/router';
import { TranslatePipe } from '../pipes/translate.pipe';

@Component({
  selector: 'app-action-card',
  standalone: true,
  imports: [CommonModule, MatIconModule, TranslatePipe],
  templateUrl: './action-card.html',
  styleUrls: ['./action-card.css'],
})
export class ActionCard {
  @Input() titleKey!: string;
  @Input() subtitleKey!: string;
  @Input() icon!: string;
  @Input() ariaLabelKey!: string;
  @Input() routerPath!: string;
  private readonly router = inject(Router);

  navigateTo() {
    this.router.navigate([this.routerPath]);
  }
}

----------------------------------------

--- Archivo: action-card.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/action-card/action-card.css
----------------------------------------
button {
  width: 230px;
  background-color: var(--mat-sys-primary);
  border: none;
  color: white;
  border-radius: 17px;
  height: 90px;
  padding: 20px;
  cursor: pointer;

  mat-icon {
    width: 48px !important;
    height: 48px !important;
    font-size: 48px;
  }
}

button p {
  margin: 0;
  line-height: 1.2;
  text-align: left;

  font-family: 'League Spartan', sans-serif;
  font-weight: var(--md-sys-typescale-body-small-weight);
}

.subtitle {
  font-size: 14px;
  font-weight: 300 !important;
  margin-top: 12px !important;
}

.content-button {
  display: flex;
  align-items: center;
  gap: 12px;
  justify-content: flex-start;
}

----------------------------------------

--- Archivo: action-card.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/action-card/action-card.html
----------------------------------------
<button class="card" [attr.aria-label]="ariaLabelKey" (click)="navigateTo()">
  <div class="content-button">
    <div>
      <mat-icon svgIcon="{{ icon }}"></mat-icon>
    </div>
    <div class="text-container">
      <p>{{ titleKey | translate }}</p>
      <p class="subtitle">{{ subtitleKey | translate }}</p>
    </div>
  </div>
</button>

----------------------------------------

--- Archivo: action-card.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/action-card/action-card.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ActionCard } from './action-card';

describe('ActionCard', () => {
  let component: ActionCard;
  let fixture: ComponentFixture<ActionCard>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ActionCard],
    }).compileComponents();

    fixture = TestBed.createComponent(ActionCard);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: page-header.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/page-header/page-header.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PageHeader } from './page-header';

describe('PageHeader', () => {
  let component: PageHeader;
  let fixture: ComponentFixture<PageHeader>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [PageHeader],
    }).compileComponents();

    fixture = TestBed.createComponent(PageHeader);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: page-header.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/page-header/page-header.css
----------------------------------------
.page-title {
  font-size: 36px;
  font-weight: 600;
}

.user-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.body1 {
  color: var(--mat-sys-primary);
  font-weight: var(--md-sys-typescale-body-medium-weight);
}

.body2 {
  font-weight: var(--md-sys-typescale-body-large-weight);
}

.user-menu {
  padding: 16px 24px;
}

.custom-menu {
  position: absolute;
  top: 100px;
  right: 0px;
  background: white;
  border-radius: 0px 0px 0px 8px;
  padding: 24px 0px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  width: 290px;

  .body1,
  .body2 {
    padding: 0px 80px 0px 24px;
  }
}

.logout-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 0px 80px 0px 24px;
  cursor: pointer;
  font-size: var(--md-sys-typescale-body-medium-size);
}

.toolbar-title-group {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

----------------------------------------

--- Archivo: page-header.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/page-header/page-header.html
----------------------------------------
<mat-toolbar role="banner" [attr.aria-label]="'topbarLabel' | translate">
  <div class="toolbar-title-group">
    <ng-container *ngIf="backRoute">
      <button mat-icon-button (click)="goBack()" aria-label="Back">
        <mat-icon>arrow_back</mat-icon>
      </button>
    </ng-container>

    <span class="page-title">{{ pageTitle | translate }}</span>
  </div>

  <span class="spacer"></span>

  <div class="user-info" role="contentinfo" [attr.aria-label]="'userBlockLabel' | translate">
    <a routerLink="/settings/region" [attr.aria-label]="'regionSettingsLabel' | translate">
      <img src="./assets/icons/earth.svg" [attr.alt]="'regionSettingsAlt' | translate" />
    </a>

    <button
      mat-fab
      [attr.aria-label]="'userButtonLabel' | translate"
      (click)="toggleMenu()"
      tabindex="0"
      (keydown.enter)="toggleMenu()"
      (keydown.space)="toggleMenu()"
    >
      <mat-icon svgIcon="user" aria-hidden="true"></mat-icon>
    </button>

    <div class="user-details" [attr.aria-label]="'userDetailsLabel' | translate">
      <div class="user-name" [attr.aria-label]="'userNameLabel' | translate">
        <p class="body1">{{ 'userGreeting' | translate }}</p>
        <p class="body2">{{ userName }}</p>
      </div>

      <div class="user-role" [attr.aria-label]="'userRoleLabel' | translate">
        <p>{{ userRole }}</p>
      </div>
    </div>
  </div>
</mat-toolbar>

<div class="custom-menu" *ngIf="menuVisible" [attr.aria-label]="'userMenuLabel' | translate">
  <h6 class="body1">{{ userName }}</h6>
  <p class="body2">{{ userRole }}</p>
  <mat-divider></mat-divider>
  <a
    mat-list-item
    (click)="logout()"
    class="logout-item"
    [attr.aria-label]="'logoutLabel' | translate"
    (keydown.enter)="logout()"
    (keydown.space)="logout()"
    tabindex="0"
  >
    <mat-icon matListIcon aria-hidden="true" svgIcon="logout"></mat-icon>
    <span matLine>{{ 'logoutText' | translate }}</span>
  </a>
</div>

----------------------------------------

--- Archivo: page-header.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/page-header/page-header.ts
----------------------------------------
import { Component, inject, Input } from '@angular/core';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';
import { MatDividerModule } from '@angular/material/divider';
import { Router, RouterLink } from '@angular/router';
import { TranslatePipe } from '../pipes/translate.pipe';

@Component({
  selector: 'app-page-header',
  standalone: true,
  imports: [
    CommonModule,
    MatToolbarModule,
    MatIconModule,
    MatButtonModule,
    MatMenuModule,
    MatDividerModule,
    RouterLink,
    TranslatePipe,
  ],
  templateUrl: './page-header.html',
  styleUrls: ['./page-header.css'],
})
export class PageHeader {
  @Input() pageTitle = '';
  @Input() userName = 'John Doe';
  @Input() userRole = 'Administrador';
  menuVisible = false;
  @Input() backRoute: string | null = null;
  private readonly router = inject(Router);

  toggleMenu(): void {
    this.menuVisible = !this.menuVisible;
  }

  logout(): void {
    // lógica de cierre de sesión
  }

  goBack() {
    if (this.backRoute) {
      this.router.navigate([this.backRoute]);
    }
  }
}

----------------------------------------

--- Archivo: custom-select.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/custom-select/custom-select.html
----------------------------------------
<label class="custom-label" [attr.for]="selectId">
  {{ labelKey | translate }}
</label>

<div
  class="custom-select"
  [class.open]="isOpen()"
  [class.error]="hasError"
  tabindex="0"
  (click)="toggle()"
  (keydown.enter)="toggle()"
  (keydown.space)="toggle()"
  role="button"
  [attr.aria-haspopup]="'listbox'"
  [attr.aria-expanded]="isOpen()"
  [attr.aria-controls]="selectId + '-options'"
  [attr.aria-label]="labelKey | translate"
  [attr.id]="selectId"
>
  <span
    class="selected-value"
    [class.placeholder]="!model()"
    [attr.aria-label]="selectedLabelKey | translate"
  >
    {{ selectedLabelKey | translate }}
  </span>
  <mat-icon svgIcon="arrow" class="arrow" aria-hidden="true"></mat-icon>
</div>

<ul
  class="custom-options"
  *ngIf="isOpen()"
  role="listbox"
  [attr.id]="selectId + '-options'"
  [attr.aria-labelledby]="selectId"
>
  @for (opt of options; track opt.value) {
    <li
      class="custom-option"
      role="option"
      [attr.aria-selected]="opt.value === model()"
      [class.selected]="opt.value === model()"
      (click)="select(opt.value)"
      (keydown.enter)="select(opt.value)"
      (keydown.space)="select(opt.value)"
      tabindex="0"
    >
      {{ opt.labelKey | translate }}
    </li>
  }
</ul>

<div class="error-message" *ngIf="hasError" role="alert">
  {{ 'fieldRequired' | translate }}
</div>

----------------------------------------

--- Archivo: custom-select.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/custom-select/custom-select.css
----------------------------------------
.custom-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 400;
  font-size: 16px;
}

.custom-select {
  position: relative;
  background: white;
  border-radius: 8px;
  padding: 0.75rem 2.5rem 0.75rem 1rem;
  cursor: pointer;
  font-family: 'League Spartan', sans-serif;
  width: 460px;
}

.custom-select.error {
  border-color: #eb5757;
}

.selected-value,
.selected-value.selected-value.placeholder {
  color: #1e1e1e;
}

.arrow {
  position: absolute;
  right: 1rem;
  top: 50%;
  width: 1rem;
  height: 1rem;
  transform: translateY(-50%);
  transition: transform 0.3s ease;
}

.custom-select.open .arrow {
  transform: translateY(-50%) rotate(180deg);
}

.custom-options {
  position: absolute;
  z-index: 10;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  background: white;
  list-style: none;
  padding: 0;
  max-height: 200px;
  overflow-y: auto;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 515px;
  margin: 0px;
}

.custom-option {
  padding: 0.75rem 1rem;
  cursor: pointer;
  transition: background 0.2s ease;
}

.custom-option:hover {
  background: #f3f4f6;
}

.custom-option.selected {
  font-weight: bold;
}

.error-message {
  margin-top: 0.25rem;
  font-size: 0.75rem;
  color: #eb5757;
}

----------------------------------------

--- Archivo: custom-select.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/custom-select/custom-select.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { CustomSelect } from './custom-select';

describe('CustomSelect', () => {
  let component: CustomSelect;
  let fixture: ComponentFixture<CustomSelect>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [CustomSelect],
    }).compileComponents();

    fixture = TestBed.createComponent(CustomSelect);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: custom-select.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/shared/custom-select/custom-select.ts
----------------------------------------
import { Component, Input, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TranslatePipe } from '../pipes/translate.pipe';
import { MatIconModule } from '@angular/material/icon';

interface SelectOption {
  value: string;
  labelKey: string;
}

@Component({
  selector: 'app-custom-select',
  standalone: true,
  imports: [CommonModule, TranslatePipe, MatIconModule],
  templateUrl: './custom-select.html',
  styleUrls: ['./custom-select.css'],
})
export class CustomSelect {
  @Input() labelKey!: string;
  @Input() options: SelectOption[] = [];
  @Input() model = signal<string>('');
  @Input() name = '';
  @Input() required!: boolean;
  @Input() placeholderKey = 'selectPlaceholder';
  @Input() selectId = 'custom-select-' + Math.random().toString(36).substring(2, 8);

  isOpen = signal(false);
  touched = signal(false);

  get hasError() {
    return this.required && this.touched() && !this.model();
  }

  toggle() {
    this.isOpen.update((open) => !open);
    if (!this.isOpen()) this.touched.set(true);
  }

  select(value: string) {
    this.model.set(value);
    this.isOpen.set(false);
    this.touched.set(true);
  }

  get selectedLabelKey(): string {
    const selected = this.options.find((opt) => opt.value === this.model());
    return selected?.labelKey ?? this.placeholderKey;
  }
}

----------------------------------------

--- Archivo: dashboard.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/dashboard/dashboard.css
----------------------------------------
.action-card {
  display: flex;
  align-items: center;
  border-radius: 1rem;
  padding: 1.5rem;
  color: white;
  cursor: pointer;
  border: none;
  width: 100%;
  text-align: left;

  .icon {
    font-size: 2rem;
    margin-right: 1rem;
  }

  .texts {
    h3 {
      font-size: 1.25rem;
      margin: 0;
      font-weight: 600;
    }
    p {
      font-size: 1rem;
      margin: 0;
      opacity: 0.9;
    }
  }

  &:hover {
    filter: brightness(1.1);
  }
}

.cards-grid {
  display: grid;

  grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));

  gap: 24px;

  justify-content: center;

  padding: 60px 80px;
}

----------------------------------------

--- Archivo: dashboard.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/dashboard/dashboard.ts
----------------------------------------
import { Component } from '@angular/core';
import { PageHeader } from '../../shared/page-header/page-header';
import { MatButtonModule } from '@angular/material/button';
import { ActionCard } from '../../shared/action-card/action-card';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [CommonModule, PageHeader, MatButtonModule, ActionCard],
  templateUrl: './dashboard.html',
  styleUrls: ['./dashboard.css'],
})
export class Dashboard {
  pageTitle = 'pageDashboardTitle';

  cards = [
    {
      titleKey: 'cardProductsTitle',
      subtitleKey: 'cardProductsSubtitle',
      icon: 'upload',
      ariaLabelKey: 'cardProductsAria',
      path: '/productos/cargar',
    },
    {
      titleKey: 'cardRoutesTitle',
      subtitleKey: 'cardRoutesSubtitle',
      icon: 'map',
      ariaLabelKey: 'cardRoutesAria',
      path: '/rutas/generar',
    },
    {
      titleKey: 'cardSalesTitle',
      subtitleKey: 'cardSalesSubtitle',
      icon: 'list',
      ariaLabelKey: 'cardSalesAria',
      path: '/ventas/crear-plan',
    },
    {
      titleKey: 'cardUsersTitle',
      subtitleKey: 'cardUsersSubtitle',
      icon: 'users',
      ariaLabelKey: 'cardUsersAria',
      path: '/usuarios/registro',
    },
    {
      titleKey: 'cardReportsTitle',
      subtitleKey: 'cardReportsSubtitle',
      icon: 'reports',
      ariaLabelKey: 'cardReportsAria',
      path: '/reportes',
    },
  ];
}

----------------------------------------

--- Archivo: dashboard.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/dashboard/dashboard.html
----------------------------------------
<app-page-header [pageTitle]="pageTitle"></app-page-header>
<div class="cards-grid">
  <app-action-card
    *ngFor="let card of cards"
    [titleKey]="card.titleKey"
    [subtitleKey]="card.subtitleKey"
    [icon]="card.icon"
    [ariaLabelKey]="card.ariaLabelKey"
    [routerPath]="card.path"
  ></app-action-card>
</div>

----------------------------------------

--- Archivo: dashboard.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/dashboard/dashboard.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Dashboard } from './dashboard';

describe('Dashboard', () => {
  let component: Dashboard;
  let fixture: ComponentFixture<Dashboard>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Dashboard],
    }).compileComponents();

    fixture = TestBed.createComponent(Dashboard);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: components.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/components/components.ts
----------------------------------------
import { Component, signal } from '@angular/core';
import { PageHeader } from '../../shared/page-header/page-header';
import { ActionCard } from '../../shared/action-card/action-card';
import { TranslatePipe } from '../../shared/pipes/translate.pipe';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { CustomSelect } from '../../shared/custom-select/custom-select';
import { StatusMessage } from '../../shared/status-message/status-message';

@Component({
  selector: 'app-components',
  standalone: true,
  imports: [
    PageHeader,
    ActionCard,
    TranslatePipe,
    MatButtonModule,
    MatIconModule,
    CustomSelect,
    StatusMessage,
  ],
  templateUrl: './components.html',
  styleUrl: './components.css',
})
export class Components {
  pageTitle = 'Componentes de la web';
  languageOptions = [
    { value: 'es', labelKey: 'spanishLabel' },
    { value: 'en', labelKey: 'englishLabel' },
  ];

  countryOptions = [
    { value: 'co', labelKey: 'colombiaLabel' },
    { value: 'mx', labelKey: 'mexicoLabel' },
  ];

  regionOptions = [
    { value: 'andina', labelKey: 'andinaLabel' },
    { value: 'caribe', labelKey: 'caribeLabel' },
  ];

  selectedLanguage = signal<string>('');
  selectedCountry = signal<string>('co');
  selectedRegion = signal<string>('');
  methodClick() {
    console.log('onclick method');
  }
}

----------------------------------------

--- Archivo: components.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/components/components.html
----------------------------------------
<app-page-header [pageTitle]="pageTitle" [backRoute]="'/dashboard'"></app-page-header>
<div>
  <section class="component-doc">
    <h2>ActionCard</h2>
    <p>
      <strong>ActionCardComponent</strong> es un componente reutilizable que representa una tarjeta
      interactiva con ícono, título y subtítulo. Está diseñada para funcionar como botón de
      navegación dentro de la aplicación, permitiendo redirección a una ruta específica al hacer
      clic.
    </p>

    <h3>Ejemplo</h3>
    <app-action-card
      [titleKey]="'dashboardTitle'"
      [subtitleKey]="'dashboardSubtitle'"
      [icon]="'chart'"
      [ariaLabelKey]="'dashboardCardLabel'"
      [routerPath]="'/dashboard'"
    ></app-action-card>

    <h3>Inputs</h3>
    <ul>
      <li>
        <strong>ariaLabelKey</strong>: <em>string</em> — Clave de traducción para accesibilidad
        (atributo <code>aria-label</code>).
      </li>
      <li>
        <strong>icon</strong>: <em>string</em> — Nombre del ícono SVG registrado que se mostrará en
        la tarjeta.
      </li>
      <li>
        <strong>titleKey</strong>: <em>string</em> — Clave de traducción para el título principal de
        la tarjeta.
      </li>
      <li>
        <strong>subtitleKey</strong>: <em>string</em> — Clave de traducción para el subtítulo
        descriptivo.
      </li>
      <li>
        <strong>routerPath</strong>: <em>string</em> — Ruta a la que se navega al hacer clic en la
        tarjeta.
      </li>
    </ul>

    <h3>Comportamiento</h3>
    <p>
      Al hacer clic en la tarjeta, se ejecuta el método <code>navigateTo()</code>, que redirige al
      usuario mediante el <code>Router</code> de Angular. El componente está optimizado para
      accesibilidad y traducción dinámica usando <code>translate</code>.
    </p>
  </section>
  <hr />
  <section class="component-doc">
    <h2>PageHeaderComponent</h2>
    <p>
      <strong>PageHeaderComponent</strong> es un componente de encabezado reutilizable que se
      muestra en la parte superior de cada vista. Incluye el título de la página, un botón opcional
      de "volver", y un bloque de información del usuario con acceso rápido a configuración regional
      y cierre de sesión.
    </p>

    <h3>Ejemplo</h3>
    <app-page-header [pageTitle]="pageTitle" [backRoute]="'/dashboard'"></app-page-header>

    <h3>Inputs</h3>
    <ul>
      <li>
        <strong>pageTitle</strong>: <em>string</em> — Clave de traducción para el título de la
        página.
      </li>
      <li>
        <strong>backRoute</strong>: <em>string</em> — Ruta a la que se navega al hacer clic en el
        botón de "volver". Si no se proporciona, el botón no se muestra.
      </li>
    </ul>

    <h3>Contenido interno</h3>
    <ul>
      <li>
        <strong>Botón de volver</strong>: Se muestra solo si <code>backRoute</code> está definido.
        Usa <code>mat-icon-button</code> con el ícono <code>arrow_back</code>.
      </li>
      <li>
        <strong>Título de la página</strong>: Traducido dinámicamente con <code>translate</code>.
      </li>
      <li>
        <strong>Bloque de usuario</strong>: Muestra nombre, rol y un botón flotante con ícono de
        usuario.
      </li>
      <li>
        <strong>Menú desplegable</strong>: Aparece al hacer clic en el botón de usuario. Incluye
        nombre, rol y opción de cierre de sesión.
      </li>
    </ul>

    <h3>Accesibilidad</h3>
    <p>
      Todos los elementos clave incluyen atributos <code>aria-label</code> traducibles para
      compatibilidad con lectores de pantalla. El botón de volver usa
      <code>aria-label="Back"</code> y el menú desplegable se describe con
      <code>aria-label="userMenuLabel"</code>.
    </p>

    <h3>Comportamiento</h3>
    <ul>
      <li><code>goBack()</code>: Navega a la ruta definida en <code>backRoute</code>.</li>
      <li><code>toggleMenu()</code>: Muestra u oculta el menú de usuario.</li>
      <li><code>logout()</code>: Ejecuta la lógica de cierre de sesión.</li>
    </ul>
  </section>
  <hr />
  <section class="component-doc">
    <h2>Botón de acción (mat-flat-button)</h2>
    <p>
      Este botón representa una acción principal dentro de una vista, como guardar configuraciones.
      Utiliza <code>mat-flat-button</code> de Angular Material con estilo plano, color primario, y
      soporte para traducción dinámica del texto. También puede deshabilitarse mediante una
      condición lógica.
    </p>

    <h3>Ejemplo</h3>
    <button mat-flat-button color="primary" (click)="methodClick()">
      {{ 'saveButton' | translate }}
    </button>

    <h3>Ejemplo con estado deshabilitado</h3>
    <button mat-flat-button color="primary" [disabled]="true" (click)="methodClick()">
      {{ 'saveButton' | translate }}
    </button>

    <h3>Propiedades</h3>
    <ul>
      <li><strong>mat-flat-button</strong>: Aplica estilo plano sin sombra ni elevación.</li>
      <li><strong>color="primary"</strong>: Usa el color primario del tema.</li>
      <li><strong>(click)="method()"</strong>: Ejecuta una acción al hacer clic.</li>
      <li><strong>[disabled]</strong>: Desactiva el botón.</li>
      <li>
        <strong>{{ 'saveButton' | translate }}</strong
        >: Traduce dinámicamente el texto del botón.
      </li>
    </ul>

    <h3>Comportamiento</h3>
    <p>
      El botón ejecuta el método <code>method()</code> definido en el componente. Puede
      deshabilitarse para evitar múltiples envíos o mientras se realiza una operación.
    </p>
  </section>
  <hr />
  <section class="component-doc">
    <h2>Botón plano con ícono (mat-button)</h2>
    <p>
      Este botón utiliza <code>mat-button</code> de Angular Material, con estilo plano y fondo
      transparente. Incluye un ícono SVG decorativo y texto traducible. Es ideal para acciones
      secundarias como descargar, compartir o abrir enlaces.
    </p>

    <h3>Ejemplo</h3>
    <button mat-button (click)="methodClick()">
      <mat-icon aria-hidden="true">download</mat-icon>
      {{ 'standardTemplateLabel' | translate }}
    </button>

    <h3>Características</h3>
    <ul>
      <li><strong>mat-button</strong>: Botón plano sin fondo ni sombra.</li>
      <li><strong>Ícono SVG</strong>: Se muestra antes del texto, decorativo.</li>
      <li><strong>Texto traducible</strong>: Compatible con <code>translate</code>.</li>
      <li><strong>Estado deshabilitado</strong>: Controlado con <code>[disabled]</code>.</li>
    </ul>
  </section>
  <hr />
  <section class="component-doc">
    <h2>StatusMessageComponent (uso en mensajes de estado)</h2>
    <p>
      Este componente se utiliza para mostrar mensajes de éxito o error en la interfaz. Puede
      integrarse de forma embebida en el layout o mostrarse como mensaje flotante (toast) en la
      esquina inferior centrada. A continuación se muestran ejemplos de uso y los atributos
      disponibles.
    </p>

    <h3>Estado: mensaje exitoso embebido</h3>
    <app-status-message type="success" messageKey="reportSuccessMessage"></app-status-message>

    <h3>Estado: mensaje de error flotante</h3>
    <app-status-message
      type="error"
      messageKey="reportErrorMessage"
      [float]="true"
      style="margin-top: 20px"
    ></app-status-message>

    <h3>Estado: mensaje temporal (desaparece automáticamente)</h3>
    <app-status-message
      type="success"
      messageKey="reportSuccessMessage"
      [duration]="4000"
      style="margin-top: 20px"
    ></app-status-message>

    <h3>Inputs disponibles</h3>
    <ul>
      <li>
        <strong>type</strong>: Define el tipo de mensaje. Puede ser <code>'success'</code> o
        <code>'error'</code>.
      </li>
      <li><strong>messageKey</strong>: Clave de traducción para el contenido del mensaje.</li>
      <li>
        <strong>float</strong>: Si es <code>true</code>, el mensaje se muestra como toast flotante
        centrado. Si es <code>false</code> (por defecto), se muestra embebido.
      </li>
      <li>
        <strong>duration</strong>: Tiempo en milisegundos que el mensaje permanece visible. Si no se
        define, el mensaje queda estático.
      </li>
    </ul>

    <h3>Estados visuales esperados</h3>
    <ul>
      <li>
        <strong>Success</strong>: fondo <code>#e6f4ea</code>, texto <code>#09A794</code>, ícono
        <code>check</code> al final.
      </li>
      <li>
        <strong>Error</strong>: fondo <code>#fbe9e7</code>, texto <code>#EB5757</code>, ícono
        <code>close</code> al final.
      </li>
    </ul>

    <h3>Accesibilidad</h3>
    <ul>
      <li>Usa <code>role="status"</code> para éxito y <code>role="alert"</code> para error.</li>
      <li>
        Incluye <code>aria-live</code> para que el mensaje sea anunciado automáticamente por
        lectores de pantalla.
      </li>
      <li>
        Los íconos están marcados como <code>aria-hidden="true"</code> para evitar redundancia.
      </li>
    </ul>
  </section>
</div>

----------------------------------------

--- Archivo: components.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/components/components.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Components } from './components';

describe('Components', () => {
  let component: Components;
  let fixture: ComponentFixture<Components>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Components],
    }).compileComponents();

    fixture = TestBed.createComponent(Components);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: components.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/components/components.css
----------------------------------------
.component-doc {
  padding: 24px;
}

----------------------------------------

--- Archivo: regional-settings.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/regional-settings/regional-settings.ts
----------------------------------------
import {
  Component,
  ChangeDetectionStrategy,
  signal,
  computed,
  inject,
  ApplicationRef,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { MatDividerModule } from '@angular/material/divider';
import { MatInputModule } from '@angular/material/input';
import { PageHeader } from '../../shared/page-header/page-header';
import { TranslatePipe } from '../../shared/pipes/translate.pipe';
import { currentLangSignal, loadTranslations } from '../../shared/lang/lang-store';
import { CustomSelect } from '../../shared/custom-select/custom-select';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    PageHeader,
    CommonModule,
    FormsModule,
    MatFormFieldModule,
    MatSelectModule,
    MatButtonModule,
    MatIconModule,
    MatDividerModule,
    MatInputModule,
    TranslatePipe,
    CustomSelect,
  ],
  templateUrl: './regional-settings.html',
  styleUrls: ['./regional-settings.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class RegionalSettings {
  private readonly appRef = inject(ApplicationRef);
  public readonly currentLangSignal = currentLangSignal;
  pageTitle = 'pageRegionTitle';

  languageOptions = [
    { value: 'es-CO', labelKey: 'language_es_co' },
    { value: 'en-US', labelKey: 'language_en_us' },
  ];

  countryOptions = [
    { value: 'CO', labelKey: 'country_co' },
    { value: 'PE', labelKey: 'country_pe' },
    { value: 'EC', labelKey: 'country_ec' },
    { value: 'MX', labelKey: 'country_mx' },
  ];

  selectedLanguage = signal<string>(localStorage.getItem('userLang') || 'es-CO');
  selectedCountry = signal<string>(localStorage.getItem('userCountry') || 'CO');

  initialLanguage = localStorage.getItem('userLang') || 'es-CO';
  initialCountry = localStorage.getItem('userCountry') || 'CO';

  saveStatus = signal<'idle' | 'saving' | 'success'>('idle');

  isSaveDisabled = computed(() => {
    const langChanged = this.selectedLanguage() !== this.initialLanguage;
    const countryChanged = this.selectedCountry() !== this.initialCountry;
    return this.saveStatus() === 'saving' || (!langChanged && !countryChanged);
  });

  saveSettings() {
    const newLang = this.selectedLanguage();
    const newCountry = this.selectedCountry();

    localStorage.setItem('userLang', newLang);
    localStorage.setItem('userCountry', newCountry);

    const newLangPrefix = newLang.split('-')[0];

    if (newLangPrefix === 'es' || newLangPrefix === 'en') {
      loadTranslations(newLangPrefix as 'es' | 'en');
      this.appRef.tick();
    }

    this.initialLanguage = newLang;
    this.initialCountry = newCountry;
  }
}

----------------------------------------

--- Archivo: regional-settings.html
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/regional-settings/regional-settings.html
----------------------------------------
<app-page-header [pageTitle]="pageTitle" [backRoute]="'/dashboard'"></app-page-header>

<div class="regional-container">
  <app-custom-select
    [labelKey]="'languageLabel'"
    [placeholderKey]="'languagePlaceholder'"
    [options]="languageOptions"
    [model]="selectedLanguage"
    name="language"
    [required]="true"
  ></app-custom-select>

  <app-custom-select
    [labelKey]="'countryLabel'"
    [placeholderKey]="'countryPlaceholder'"
    [options]="countryOptions"
    [model]="selectedCountry"
    name="country"
    [required]="true"
    style="margin-top: 20px"
  ></app-custom-select>

  <div class="button-container">
    <button mat-flat-button color="primary" (click)="saveSettings()">
      {{ 'saveButton' | translate }}
    </button>
  </div>
</div>

----------------------------------------

--- Archivo: en.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/regional-settings/en.json
----------------------------------------
{
  "menu_dashboard_label": "Dashboard",
  "menu_dashboard_aria": "Go to main dashboard",
  "menu_productos_label": "Products",
  "menu_productos_aria": "Go to products",
  "menu_usuarios_label": "Users",
  "menu_usuarios_aria": "Go to users",
  "menu_reportes_label": "Reports",
  "menu_reportes_aria": "Go to reports",
  "menu_ventas_label": "Sales",
  "menu_ventas_aria": "Go to sales",
  "menu_rutas_label": "Routes",
  "menu_rutas_aria": "Go to routes",
  "menu_settings_label": "Regional Settings",
  "menu_settings_aria": "Go to Regional Settings",
  "app_logo_label": "Application logo",
  "languageLabel": "Language",
  "countryLabel": "Country",
  "saveButton": "Save",
  "language_es_co": "Spanish (Colombia)",
  "language_en_us": "English (United States)",
  "country_co": "Colombia",
  "country_pe": "Peru",
  "country_ec": "Ecuador",
  "country_mx": "Mexico",
  "topbarLabel": "Page header",
  "userBlockLabel": "User information",
  "regionSettingsLabel": "Regional settings",
  "regionSettingsAlt": "Regional settings",
  "userButtonLabel": "User profile",
  "userDetailsLabel": "User details",
  "userNameLabel": "User name",
  "userGreeting": "Hi,",
  "userRoleLabel": "User role",
  "userMenuLabel": "User menu",
  "logoutLabel": "Log out",
  "logoutText": "Log out",
  "pageDashboardTitle": "Dashboard",
  "pageRegionTitle": "Regional Settings",
  "cardProductsTitle": "Product Upload",
  "cardProductsSubtitle": "Upload Template",
  "cardProductsAria": "Product upload card",
  "cardRoutesTitle": "Generate Routes",
  "cardRoutesSubtitle": "Generate Now",
  "cardRoutesAria": "Routes card",
  "cardSalesTitle": "Create Sales Plan",
  "cardSalesSubtitle": "Create Now",
  "cardSalesAria": "Sales card",
  "cardUsersTitle": "User Registration",
  "cardUsersSubtitle": "Import CSV",
  "cardUsersAria": "Users card",
  "cardReportsTitle": "Reports",
  "cardReportsSubtitle": "List and Generate Metrics",
  "cardReportsAria": "Reports card"
}

----------------------------------------

--- Archivo: regional-settings.spec.ts
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/regional-settings/regional-settings.spec.ts
----------------------------------------
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RegionalSettings } from './regional-settings';

describe('RegionalSettings', () => {
  let component: RegionalSettings;
  let fixture: ComponentFixture<RegionalSettings>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RegionalSettings],
    }).compileComponents();

    fixture = TestBed.createComponent(RegionalSettings);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

----------------------------------------

--- Archivo: regional-settings.css
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/regional-settings/regional-settings.css
----------------------------------------
::ng-deep .mat-mdc-select-arrow {
  display: none;
}

.regional-container {
  display: grid;
  justify-content: center;
  margin-top: 160px;
}

.button-container {
  display: grid;
  justify-content: center;
  margin-top: 34px;
}

----------------------------------------

--- Archivo: es.json
--- Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/app/pages/regional-settings/es.json
----------------------------------------
{
  "menu_dashboard_label": "Dashboard",
  "menu_dashboard_aria": "Ir al panel principal",
  "menu_productos_label": "Productos",
  "menu_productos_aria": "Ir a productos",
  "menu_usuarios_label": "Usuarios",
  "menu_usuarios_aria": "Ir a usuarios",
  "menu_reportes_label": "Reportes",
  "menu_reportes_aria": "Ir a reportes",
  "menu_ventas_label": "Ventas",
  "menu_ventas_aria": "Ir a ventas",
  "menu_rutas_label": "Rutas",
  "menu_rutas_aria": "Ir a rutas",
  "menu_settings_label": "Ajustes Regionales",
  "menu_settings_aria": "Ir a Ajustes Regionales",
  "app_logo_label": "Logo de la aplicación",
  "languageLabel": "Idioma",
  "countryLabel": "País",
  "saveButton": "Guardar",
  "language_es_co": "Español (Colombia)",
  "language_en_us": "Inglés (Estados Unidos)",
  "country_co": "Colombia",
  "country_pe": "Perú",
  "country_ec": "Ecuador",
  "country_mx": "México",
  "topbarLabel": "Encabezado de la página",
  "userBlockLabel": "Información del usuario",
  "regionSettingsLabel": "Ajustes regionales",
  "regionSettingsAlt": "Ajustes regionales",
  "userButtonLabel": "Perfil de usuario",
  "userDetailsLabel": "Detalles del usuario",
  "userNameLabel": "Nombre del usuario",
  "userGreeting": "Hola,",
  "userRoleLabel": "Rol del usuario",
  "userMenuLabel": "Menú de usuario",
  "logoutLabel": "Cerrar sesión",
  "logoutText": "Cerrar sesión",
  "pageDashboardTitle": "Dashboard",
  "pageRegionTitle": "Ajustes Regionales",
  "cardProductsTitle": "Carga de productos",
  "cardProductsSubtitle": "Subir plantilla",
  "cardProductsAria": "Card de carga de productos",
  "cardRoutesTitle": "Generar rutas",
  "cardRoutesSubtitle": "Generar ahora",
  "cardRoutesAria": "Card de rutas",
  "cardSalesTitle": "Crear plan de venta",
  "cardSalesSubtitle": "Crear ahora",
  "cardSalesAria": "Card de ventas",
  "cardUsersTitle": "Registro de usuarios",
  "cardUsersSubtitle": "Importar CSV",
  "cardUsersAria": "Card de usuarios",
  "cardReportsTitle": "Reportes",
  "cardReportsSubtitle": "Listar y generar métricas",
  "cardReportsAria": "Card de reportes"
}

----------------------------------------

Imagen encontrada -> Archivo: logo.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/logo.svg

Imagen encontrada -> Archivo: earth.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/earth.svg

Imagen encontrada -> Archivo: list.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/list.svg

Imagen encontrada -> Archivo: chart.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/chart.svg

Imagen encontrada -> Archivo: user.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/user.svg

Imagen encontrada -> Archivo: dollar.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/dollar.svg

Imagen encontrada -> Archivo: home.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/home.svg

Imagen encontrada -> Archivo: logout.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/logout.svg

Imagen encontrada -> Archivo: map.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/map.svg

Imagen encontrada -> Archivo: reports.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/reports.svg

Imagen encontrada -> Archivo: bar-chart.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/bar-chart.svg

Imagen encontrada -> Archivo: arrow-icon.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/arrow-icon.svg

Imagen encontrada -> Archivo: box.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/box.svg

Imagen encontrada -> Archivo: upload.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/upload.svg

Imagen encontrada -> Archivo: users.svg
Ruta: /Users/javierfajardo/Documents/maestria/integrador2/Front-MeddiSupply/medisupply-web-13/src/assets/icons/users.svg

